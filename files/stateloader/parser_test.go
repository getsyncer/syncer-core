package stateloader_test

import (
	"context"
	"testing"

	"github.com/getsyncer/syncer-core/files/stateloader"

	"github.com/getsyncer/syncer-core/files/filestesthelp"

	"github.com/getsyncer/syncer-core/files"
	"github.com/getsyncer/syncer-core/files/stateloader/teststateloader"

	"github.com/stretchr/testify/require"
)

func TestContainsSubstring(t *testing.T) {
	containTest := func(mustContain string, testString string, result bool) func(t *testing.T) {
		return func(t *testing.T) {
			require.Equal(t, result, stateloader.ContainsSubstring(mustContain)(testString))
		}
	}
	t.Run("contains", containTest("foo", "foobar", true))
	t.Run("not contains", containTest("foo", "bar", false))
}

func TestRecommendedNewlineSeparatedConfig(t *testing.T) {
	x := stateloader.RecommendedNewlineSeparatedConfig()
	require.Equal(t, "\n", x.SplitBy)
	require.Equal(t, true, x.StartSection("THIS SECTION IS AUTOGENERATED BY SYNCER, DO NOT EDIT"))
}

func TestParse(t *testing.T) {
	cfg := stateloader.RecommendedNewlineSeparatedConfig()
	exampleFile := `Pre
# THIS SECTION IS AUTOGENERATED BY SYNCER, DO NOT EDIT
a
b
z
c
# END OF AUTOGENERATED SECTION BY SYNCER
Post`
	l := teststateloader.TestStateloader{
		FileSystem: files.NewSystem[*files.State](map[files.Path]*files.State{
			"readme.md": filestesthelp.NewStateNewFile(exampleFile),
			"main.go":   filestesthelp.NewStateNewFile("func main(){}"),
		}),
	}
	ctx := context.Background()
	pr, err := stateloader.Parse(ctx, &l, "readme.md", cfg)
	require.NoError(t, err)
	require.Equal(t, "Pre", pr.PreAutogenMsg)
	require.Equal(t, `# THIS SECTION IS AUTOGENERATED BY SYNCER, DO NOT EDIT
a
b
c
z
# END OF AUTOGENERATED SECTION BY SYNCER`, pr.AutogenMsg)
	require.Equal(t, "Post", pr.PostAutogenMsg)
}
